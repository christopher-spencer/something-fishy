"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGeneratorInternal = exports.applicationGenerator = exports.addLintingToApplication = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const jest_1 = require("@nx/jest");
const js_1 = require("@nx/js");
const versions_1 = require("@nx/js/src/utils/versions");
const eslint_1 = require("@nx/eslint");
const path_1 = require("path");
const versions_2 = require("../../utils/versions");
const e2e_project_1 = require("../e2e-project/e2e-project");
const init_1 = require("../init/init");
const setup_docker_1 = require("../setup-docker/setup-docker");
const has_webpack_plugin_1 = require("../../utils/has-webpack-plugin");
const add_build_target_defaults_1 = require("@nx/devkit/src/generators/add-build-target-defaults");
const log_show_project_command_1 = require("@nx/devkit/src/utils/log-show-project-command");
function getWebpackBuildConfig(project, options) {
    return {
        executor: `@nx/webpack:webpack`,
        outputs: ['{options.outputPath}'],
        defaultConfiguration: 'production',
        options: {
            target: 'node',
            compiler: 'tsc',
            outputPath: (0, devkit_1.joinPathFragments)('dist', options.rootProject ? options.name : options.appProjectRoot),
            main: (0, devkit_1.joinPathFragments)(project.sourceRoot, 'main' + (options.js ? '.js' : '.ts')),
            tsConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
            assets: [(0, devkit_1.joinPathFragments)(project.sourceRoot, 'assets')],
            webpackConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'webpack.config.js'),
        },
        configurations: {
            development: {},
            production: {
                ...(options.docker && { generateLockfile: true }),
            },
        },
    };
}
function getEsBuildConfig(project, options) {
    return {
        executor: '@nx/esbuild:esbuild',
        outputs: ['{options.outputPath}'],
        defaultConfiguration: 'production',
        options: {
            platform: 'node',
            outputPath: (0, devkit_1.joinPathFragments)('dist', options.rootProject ? options.name : options.appProjectRoot),
            // Use CJS for Node apps for widest compatibility.
            format: ['cjs'],
            bundle: false,
            main: (0, devkit_1.joinPathFragments)(project.sourceRoot, 'main' + (options.js ? '.js' : '.ts')),
            tsConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
            assets: [(0, devkit_1.joinPathFragments)(project.sourceRoot, 'assets')],
            generatePackageJson: true,
            esbuildOptions: {
                sourcemap: true,
                // Generate CJS files as .js so imports can be './foo' rather than './foo.cjs'.
                outExtension: { '.js': '.js' },
            },
        },
        configurations: {
            development: {},
            production: {
                ...(options.docker && { generateLockfile: true }),
                esbuildOptions: {
                    sourcemap: false,
                    // Generate CJS files as .js so imports can be './foo' rather than './foo.cjs'.
                    outExtension: { '.js': '.js' },
                },
            },
        },
    };
}
function getServeConfig(options) {
    return {
        executor: '@nx/js:node',
        defaultConfiguration: 'development',
        options: {
            buildTarget: `${options.name}:build`,
        },
        configurations: {
            development: {
                buildTarget: `${options.name}:build:development`,
            },
            production: {
                buildTarget: `${options.name}:build:production`,
            },
        },
    };
}
function addProject(tree, options) {
    const project = {
        root: options.appProjectRoot,
        sourceRoot: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src'),
        projectType: 'application',
        targets: {},
        tags: options.parsedTags,
    };
    if (options.bundler === 'esbuild') {
        (0, add_build_target_defaults_1.addBuildTargetDefaults)(tree, '@nx/esbuild:esbuild');
        project.targets.build = getEsBuildConfig(project, options);
    }
    else if (options.bundler === 'webpack') {
        if (!(0, has_webpack_plugin_1.hasWebpackPlugin)(tree)) {
            (0, add_build_target_defaults_1.addBuildTargetDefaults)(tree, `@nx/webpack:webpack`);
            project.targets.build = getWebpackBuildConfig(project, options);
        }
    }
    project.targets.serve = getServeConfig(options);
    (0, devkit_1.addProjectConfiguration)(tree, options.name, project, options.standaloneConfig);
}
function addAppFiles(tree, options) {
    const sourceRoot = (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src');
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, './files/common'), options.appProjectRoot, {
        ...options,
        tmpl: '',
        name: options.name,
        root: options.appProjectRoot,
        offset: (0, devkit_1.offsetFromRoot)(options.appProjectRoot),
        rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(tree, options.appProjectRoot),
        webpackPluginOptions: (0, has_webpack_plugin_1.hasWebpackPlugin)(tree)
            ? {
                outputPath: (0, devkit_1.joinPathFragments)('dist', options.rootProject ? options.name : options.appProjectRoot),
                main: './src/main' + (options.js ? '.js' : '.ts'),
                tsConfig: './tsconfig.app.json',
                assets: ['./src/assets'],
            }
            : null,
    });
    if (options.bundler !== 'webpack') {
        tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, 'webpack.config.js'));
    }
    if (options.framework && options.framework !== 'none') {
        (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, `./files/${options.framework}`), options.appProjectRoot, {
            ...options,
            tmpl: '',
            name: options.name,
            root: options.appProjectRoot,
            offset: (0, devkit_1.offsetFromRoot)(options.appProjectRoot),
            rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(tree, options.appProjectRoot),
        });
    }
    if (options.js) {
        (0, devkit_1.toJS)(tree);
    }
    if (options.pascalCaseFiles) {
        devkit_1.logger.warn('NOTE: --pascalCaseFiles is a noop');
    }
}
function addProxy(tree, options) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.frontendProject);
    if (projectConfig.targets && projectConfig.targets.serve) {
        const pathToProxyFile = `${projectConfig.root}/proxy.conf.json`;
        projectConfig.targets.serve.options = {
            ...projectConfig.targets.serve.options,
            proxyConfig: pathToProxyFile,
        };
        if (!tree.exists(pathToProxyFile)) {
            tree.write(pathToProxyFile, JSON.stringify({
                '/api': {
                    target: `http://localhost:${options.port}`,
                    secure: false,
                },
            }, null, 2));
        }
        else {
            //add new entry to existing config
            const proxyFileContent = tree.read(pathToProxyFile).toString();
            const proxyModified = {
                ...JSON.parse(proxyFileContent),
                [`/${options.name}-api`]: {
                    target: `http://localhost:${options.port}`,
                    secure: false,
                },
            };
            tree.write(pathToProxyFile, JSON.stringify(proxyModified, null, 2));
        }
        (0, devkit_1.updateProjectConfiguration)(tree, options.frontendProject, projectConfig);
    }
}
async function addLintingToApplication(tree, options) {
    const lintTask = await (0, eslint_1.lintProjectGenerator)(tree, {
        linter: options.linter,
        project: options.name,
        tsConfigPaths: [
            (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
        ],
        unitTestRunner: options.unitTestRunner,
        skipFormat: true,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject,
        addPlugin: options.addPlugin,
    });
    return lintTask;
}
exports.addLintingToApplication = addLintingToApplication;
function addProjectDependencies(tree, options) {
    const bundlers = {
        webpack: {
            '@nx/webpack': versions_2.nxVersion,
        },
        esbuild: {
            '@nx/esbuild': versions_2.nxVersion,
            esbuild: versions_1.esbuildVersion,
        },
    };
    const frameworkDependencies = {
        express: {
            express: versions_2.expressVersion,
        },
        koa: {
            koa: versions_2.koaVersion,
        },
        fastify: {
            fastify: versions_2.fastifyVersion,
            'fastify-plugin': versions_2.fastifyPluginVersion,
            '@fastify/autoload': versions_2.fastifyAutoloadVersion,
            '@fastify/sensible': versions_2.fastifySensibleVersion,
        },
    };
    const frameworkDevDependencies = {
        express: {
            '@types/express': versions_2.expressTypingsVersion,
        },
        koa: {
            '@types/koa': versions_2.koaTypingsVersion,
        },
        fastify: {},
    };
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {
        ...frameworkDependencies[options.framework],
        tslib: versions_2.tslibVersion,
    }, {
        ...frameworkDevDependencies[options.framework],
        ...bundlers[options.bundler],
        '@types/node': versions_2.typesNodeVersion,
    });
}
function updateTsConfigOptions(tree, options) {
    (0, devkit_1.updateJson)(tree, `${options.appProjectRoot}/tsconfig.json`, (json) => {
        if (options.rootProject) {
            return {
                compilerOptions: {
                    ...js_1.tsConfigBaseOptions,
                    ...json.compilerOptions,
                    esModuleInterop: true,
                },
                ...json,
                extends: undefined,
                exclude: ['node_modules', 'tmp'],
            };
        }
        else {
            return {
                ...json,
                compilerOptions: {
                    ...json.compilerOptions,
                    esModuleInterop: true,
                },
            };
        }
    });
}
async function applicationGenerator(tree, schema) {
    return await applicationGeneratorInternal(tree, {
        addPlugin: false,
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.applicationGenerator = applicationGenerator;
async function applicationGeneratorInternal(tree, schema) {
    const options = await normalizeOptions(tree, schema);
    const tasks = [];
    if (options.framework === 'nest') {
        // nx-ignore-next-line
        const { applicationGenerator } = (0, devkit_1.ensurePackage)('@nx/nest', versions_2.nxVersion);
        const nestTasks = await applicationGenerator(tree, {
            ...options,
            skipFormat: true,
        });
        return (0, devkit_1.runTasksInSerial)(...[
            nestTasks,
            () => {
                (0, log_show_project_command_1.logShowProjectCommand)(options.name);
            },
        ]);
    }
    const jsInitTask = await (0, js_1.initGenerator)(tree, {
        ...schema,
        tsConfigName: schema.rootProject ? 'tsconfig.json' : 'tsconfig.base.json',
        skipFormat: true,
    });
    tasks.push(jsInitTask);
    const initTask = await (0, init_1.initGenerator)(tree, {
        ...schema,
        skipFormat: true,
    });
    tasks.push(initTask);
    const installTask = addProjectDependencies(tree, options);
    tasks.push(installTask);
    if (options.bundler === 'webpack') {
        const { webpackInitGenerator } = (0, devkit_1.ensurePackage)('@nx/webpack', versions_2.nxVersion);
        const webpackInitTask = await webpackInitGenerator(tree, {
            skipPackageJson: options.skipPackageJson,
            skipFormat: true,
            addPlugin: options.addPlugin,
        });
        tasks.push(webpackInitTask);
        if (!options.skipPackageJson) {
            const { ensureDependencies } = await Promise.resolve().then(() => require('@nx/webpack/src/utils/ensure-dependencies'));
            tasks.push(ensureDependencies(tree, {
                uiFramework: options.isNest ? 'none' : 'react',
            }));
        }
    }
    addAppFiles(tree, options);
    addProject(tree, options);
    updateTsConfigOptions(tree, options);
    if (options.linter === eslint_1.Linter.EsLint) {
        const lintTask = await addLintingToApplication(tree, options);
        tasks.push(lintTask);
    }
    if (options.unitTestRunner === 'jest') {
        const jestTask = await (0, jest_1.configurationGenerator)(tree, {
            ...options,
            project: options.name,
            setupFile: 'none',
            skipSerializers: true,
            supportTsx: options.js,
            testEnvironment: 'node',
            compiler: options.swcJest ? 'swc' : 'tsc',
            skipFormat: true,
        });
        tasks.push(jestTask);
    }
    else {
        // No need for default spec file if unit testing is not setup.
        tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/app/app.spec.ts'));
    }
    if (options.e2eTestRunner === 'jest') {
        const e2eTask = await (0, e2e_project_1.e2eProjectGenerator)(tree, {
            ...options,
            projectType: options.framework === 'none' ? 'cli' : 'server',
            name: options.rootProject ? 'e2e' : `${options.name}-e2e`,
            directory: options.rootProject ? 'e2e' : `${options.appProjectRoot}-e2e`,
            projectNameAndRootFormat: 'as-provided',
            project: options.name,
            port: options.port,
            isNest: options.isNest,
            skipFormat: true,
        });
        tasks.push(e2eTask);
    }
    if (options.js) {
        (0, devkit_1.updateTsConfigsToJs)(tree, { projectRoot: options.appProjectRoot });
    }
    if (options.frontendProject) {
        addProxy(tree, options);
    }
    if (options.docker) {
        const dockerTask = await (0, setup_docker_1.setupDockerGenerator)(tree, {
            ...options,
            project: options.name,
            skipFormat: true,
        });
        tasks.push(dockerTask);
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    tasks.push(() => {
        (0, log_show_project_command_1.logShowProjectCommand)(options.name);
    });
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.applicationGeneratorInternal = applicationGeneratorInternal;
async function normalizeOptions(host, options) {
    const { projectName: appProjectName, projectRoot: appProjectRoot, projectNameAndRootFormat, } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(host, {
        name: options.name,
        projectType: 'application',
        directory: options.directory,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        rootProject: options.rootProject,
        callingGenerator: '@nx/node:application',
    });
    options.rootProject = appProjectRoot === '.';
    options.projectNameAndRootFormat = projectNameAndRootFormat;
    options.bundler = options.bundler ?? 'esbuild';
    options.e2eTestRunner = options.e2eTestRunner ?? 'jest';
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const nxJson = (0, devkit_1.readNxJson)(host);
    const addPlugin = process.env.NX_ADD_PLUGINS !== 'false' &&
        nxJson.useInferencePlugins !== false;
    return {
        addPlugin,
        ...options,
        name: appProjectName,
        frontendProject: options.frontendProject
            ? (0, devkit_1.names)(options.frontendProject).fileName
            : undefined,
        appProjectRoot,
        parsedTags,
        linter: options.linter ?? eslint_1.Linter.EsLint,
        unitTestRunner: options.unitTestRunner ?? 'jest',
        rootProject: options.rootProject ?? false,
        port: options.port ?? 3000,
    };
}
exports.default = applicationGenerator;
